name: CI-CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Maven settings to use JFrog
      run: |
        mkdir -p ~/.m2
        cat <<EOF > ~/.m2/settings.xml
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
  <mirrors>
    <mirror>
      <id>jfrog-mirror</id>
      <mirrorOf>*</mirrorOf>
      <url>${{ secrets.JFROG_MAVEN_REPO }}</url>
    </mirror>
  </mirrors>
  <servers>
    <server>
      <id>jfrog-mirror</id>
      <username>${env.JFROG_USER}</username>
      <password>${env.JFROG_API_KEY}</password>
    </server>
  </servers>
</settings>
EOF

    - name: Enable Maven cache
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: maven-

    - name: Build with Maven (via JFrog)
      run: ./mvnw clean package -DskipTests

    - name: Install JFrog CLI v2
      run: |
        curl -fL https://install-cli.jfrog.io | sh
        sudo mv jf /usr/local/bin/jf
        jf --version

    - name: Configure JFrog CLI
      env:
        JFROG_URL: ${{ secrets.JFROG_URL }}
        JFROG_USER: ${{ secrets.JFROG_USER }}
        JFROG_API_KEY: ${{ secrets.JFROG_API_KEY }}
      run: |
        jf config add devsecops-server \
          --artifactory-url="$JFROG_URL" \
          --user="$JFROG_USER" \
          --password="$JFROG_API_KEY" \
          --interactive=false \
          --overwrite=true

    - name: Build Docker Image
      run: docker build -t petclinic:latest .

    - name: Tag and Push Docker Image to JFrog
      env:
        JFROG_DOCKER_URL: ${{ secrets.JFROG_DOCKER_URL }}
      run: |
        docker tag petclinic:latest $JFROG_DOCKER_URL/petclinic:latest
        docker push $JFROG_DOCKER_URL/petclinic:latest

    - name: Push Docker Image to JFrog with Build Info
      env:
        JFROG_DOCKER_URL: ${{ secrets.JFROG_DOCKER_URL }}
      run: |
        jf docker push $JFROG_DOCKER_URL/petclinic:latest \
          --build-name=petclinic-ci \
          --build-number=${{ github.run_number }}

    - name: Publish Build Info
      run: jf rt build-publish petclinic-ci ${{ github.run_number }}

    - name: Xray Scan
      run: jf xr build-scan petclinic-ci ${{ github.run_number }}

